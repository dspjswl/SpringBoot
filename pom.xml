<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>demo</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <!-- set thymeleaf version -->
        <thymeleaf.version>3.0.0.RELEASE</thymeleaf.version>
        <thymeleaf-layout-dialect.version>2.0.0</thymeleaf-layout-dialect.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- set thymeleaf version -->
        <java.version>1.8</java.version>
        <!--<docker.repostory>registry.cn-shenzhen.aliyuncs.com</docker.repostory>-->
        <!--<docker.registry.name>viiso</docker.registry.name>-->
    </properties>

    <dependencies>
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-freemarker</artifactId>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- MYSQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!-- Spring Boot JDBC -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <!-- Mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.29</version>
        </dependency>
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
            <version>1.1.0</version>
            <!--<exclusions>-->
            <!--<exclusion>-->
            <!--<groupId>javax.persistence</groupId>-->
            <!--<artifactId>persistence-api</artifactId>-->
            <!--</exclusion>-->
            <!--</exclusions>-->
        </dependency>
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.1.0</version>
        </dependency>
        <!--增加eureka-server的依赖-->
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-starter-eureka</artifactId>-->
        <!--</dependency>-->
    </dependencies>

    <!--依赖管理，用于管理spring-cloud的依赖-->
    <!--<dependencyManagement>-->
        <!--<dependencies>-->
            <!--<dependency>-->
                <!--<groupId>org.springframework.cloud</groupId>-->
                <!--<artifactId>spring-cloud-dependencies</artifactId>-->
                <!--<version>Dalston.RELEASE</version>-->
                <!--<type>pom</type>-->
                <!--<scope>import</scope>-->
            <!--</dependency>-->
        <!--</dependencies>-->
    <!--</dependencyManagement>-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--docker-->
            <!--<plugin>-->
            <!--<groupId>com.spotify</groupId>-->
            <!--<artifactId>docker-maven-plugin</artifactId>-->
            <!--<version>0.4.13</version>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<phase>package</phase>-->
            <!--<goals>-->
            <!--<goal>build</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--<execution>-->
            <!--<id>tag-image</id>-->
            <!--<phase>package</phase>-->
            <!--<goals>-->
            <!--<goal>tag</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
            <!--<image>${docker.registry.name}/${project.artifactId}:${project.version}</image>-->
            <!--<newName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</newName>-->
            <!--</configuration>-->
            <!--</execution>-->
            <!--<execution>-->
            <!--<id>push-image</id>-->
            <!--<phase>deploy</phase>-->
            <!--<goals>-->
            <!--<goal>push</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
            <!--<imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>-->
            <!--</configuration>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--<configuration>-->
            <!--&lt;!&ndash; 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 &ndash;&gt;-->
            <!--<serverId>docker-aliyun</serverId>-->
            <!--<registryUrl>registry.cn-hangzhou.aliyuncs.com</registryUrl>-->
            <!--&lt;!&ndash; <forceTags>true</forceTags> &ndash;&gt;-->
            <!--&lt;!&ndash;install阶段也上传，否则只有deploy阶段上传&ndash;&gt;-->
            <!--<pushImage>true</pushImage>-->
            <!--<dockerDirectory>target/docker</dockerDirectory>-->
            <!--<imageName>-->
            <!--${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}-->
            <!--</imageName>-->
            <!--<imageTags>-->
            <!--&lt;!&ndash;docker的tag为项目版本号、latest&ndash;&gt;-->
            <!--<imageTag>${project.version}</imageTag>-->
            <!--<imageTag>latest</imageTag>-->
            <!--</imageTags>-->
            <!--<resources>-->
            <!--<rescource>&lt;!&ndash; 将打包文件放入dockerDirectory指定的位置 &ndash;&gt;-->
            <!--<targetPath>/</targetPath>-->
            <!--<directory>${project.build.directory}</directory>-->
            <!--<include>${project.build.finalName}.jar</include>-->
            <!--</rescource>-->
            <!--&lt;!&ndash; 输出Dockerfile至docker文件夹,如果不使用占位符,可使用以下配置 &ndash;&gt;-->
            <!--&lt;!&ndash;-->
            <!--<resource>-->
            <!--<directory>src/main/docker</directory>-->
            <!--<filtering>true</filtering>-->
            <!--<includes>-->
            <!--<include>**/Dockerfile</include>-->
            <!--</includes>-->
            <!--<targetPath>../docker</targetPath>-->
            <!--</resource>-->
            <!--&ndash;&gt;-->
            <!--</resources>-->
            <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>


</project>
